// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accounts.sql

package dbstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (id, user_id, balance, currency, status, created_at, updated_at, account_type, account_number)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, user_id, balance, currency, status, created_at, updated_at, account_type, account_number, last_activity
`

type CreateAccountParams struct {
	ID            uuid.UUID
	UserID        uuid.UUID
	Balance       pgtype.Numeric
	Currency      string
	Status        AccountStatus
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
	AccountType   AccountType
	AccountNumber string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.ID,
		arg.UserID,
		arg.Balance,
		arg.Currency,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.AccountType,
		arg.AccountNumber,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.Currency,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccountType,
		&i.AccountNumber,
		&i.LastActivity,
	)
	return i, err
}

const getAccountByAccountNumber = `-- name: GetAccountByAccountNumber :one
SELECT id, user_id, balance, currency, status, created_at, updated_at, account_type, account_number, last_activity FROM accounts WHERE account_number = $1
`

func (q *Queries) GetAccountByAccountNumber(ctx context.Context, accountNumber string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByAccountNumber, accountNumber)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.Currency,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccountType,
		&i.AccountNumber,
		&i.LastActivity,
	)
	return i, err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, user_id, balance, currency, status, created_at, updated_at, account_type, account_number, last_activity FROM accounts WHERE id = $1
`

func (q *Queries) GetAccountByID(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.Currency,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccountType,
		&i.AccountNumber,
		&i.LastActivity,
	)
	return i, err
}

const updateAccountBalance = `-- name: UpdateAccountBalance :exec
UPDATE accounts SET balance = $2, updated_at = $3 WHERE id = $1
`

type UpdateAccountBalanceParams struct {
	ID        uuid.UUID
	Balance   pgtype.Numeric
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) error {
	_, err := q.db.Exec(ctx, updateAccountBalance, arg.ID, arg.Balance, arg.UpdatedAt)
	return err
}
